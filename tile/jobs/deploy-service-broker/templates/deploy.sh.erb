#!/bin/bash
set -e -x

  <%
    def grab_app_domain_name
      app_domains_str = properties.app_domains.to_s
      array_start = ( app_domains_str =~ /^\[/ )
      if (array_start == 0)
        app_domain_entry = app_domains_str.gsub(/^\[/, '').gsub(/\]/,'').gsub(/,.*/, '')
      else
        app_domain_entry = app_domains_str
      end
      app_domain_entry
    end
    app_domain = grab_app_domain_name
  %>

export PATH="/var/vcap/packages/cf_cli/bin:$PATH"

export SCHEME=https
export ADMIN_USER=<%= properties.cf.admin_user %>
export ADMIN_PASSWORD=<%= properties.cf.admin_password %>
export DOMAIN=<%= properties.domain %>
export APP_DOMAIN=<%="#{app_domain}"%>
export API_ENDPOINT=$SCHEME://api.${DOMAIN}
export APP_NAME=<%= properties.appdynamics_broker.app_name %>
#export APP_VERSION=<%= properties.appdynamics_broker.app_version %>
export APP_URI=<%= properties.appdynamics_broker.app_uri %>
export ORG=${APP_NAME}-service-org
export SPACE=${APP_NAME}-service-space
export QUOTA=${APP_NAME}-service-quota
export CF_TARGET=$API_ENDPOINT
export CF_ORG=$ORG
export CF_SPACE=$SPACE
export CF_USER=$ADMIN_USER
export CF_PASSWORD=$ADMIN_PASSWORD
export CF_SKIP_SSL=<%= properties.ssl.skip_cert_verify %>
export ORG_QUOTA=<%= properties.appdynamics_broker.app_push.org_quota %>
export APP_PUSH_TIMEOUT=<%= properties.appdynamics_broker.app_push.timeout %>
export APP_PUSH_MEMORY=<%= properties.appdynamics_broker.app_push.memory %>

# Use this only if app needs additional libraries that need to be downloaded
#

# Use these variables only if app needs to persistence store for saving its plans/sevice offerings etc.
export PERSISTENCE_STORE_TYPE=<%= properties.appdynamics_broker.persistence_store_type %>


# Use these variables only if app needs to know how to connect to a remote target that it brokers

#export BROKER_NAME=${APP_NAME}-${APP_VERSION}-service-broker
export BROKER_NAME=${APP_NAME}-service-broker
export BROKER_USER=<%= properties.appdynamics_broker.broker.user %>
export BROKER_PASSWD=<%= properties.appdynamics_broker.broker.password %>
export SECURITY_USER_NAME=<%= properties.appdynamics_broker.broker.user %>
export SECURITY_USER_PASSWORD=<%= properties.appdynamics_broker.broker.password %>

export CREATE_OPEN_SECURITY_GROUP=<%= properties.appdynamics_broker.create_open_security_group %>
export DELETE_PREV_APP_INSTANCE=<%= properties.appdynamics_broker.delete_prev_app_instance %>

#export DEFAULT_DB_NAME=${APP_NAME}-${APP_VERSION}-mysql
#export DEFAULT_DB_NAME=${APP_NAME}-mysql
export SB_APP_ENV="setupServiceBrokerEnv.sh"

export EXPLODED_APP_FOLDER="exploded-app-contents"

### CUSTOM_VARIABLE_BEGIN_MARKER
export SERVICEBROKER_PLANID=<%= properties.appdynamics_broker.SERVICEBROKER_PLANID %>
export SERVICEBROKER_SERVICEID=<%= properties.appdynamics_broker.SERVICEBROKER_SERVICEID %>
export account_name=<%= properties.appdynamics_broker.account_name %>

### CUSTOM_VARIABLE_END_MARKER

export CF_HOME=`pwd`/home/cf
mkdir -p $CF_HOME

# Following variables would be replaced based on blobs that get added and are considered as app bits
# Modify extension type for App file - modify as needed
APP_PREFIX_NAME=appdynamics-service-broker
EXTENSION_TYPE=jar

TARGET_APP=${APP_PREFIX_NAME}.${EXTENSION_TYPE}
JOB_NAME=deploy-service-broker
PACKAGE_NAME_SUFFIX=service_broker
PACKAGE_PATH=`echo /var/vcap/packages/*_${PACKAGE_NAME_SUFFIX}`

RUN_DIR=/var/vcap/sys/run/$JOB_NAME
LOG_DIR=/var/vcap/sys/log/$JOB_NAME
PIDFILE=${RUN_DIR}/pid

export DEBUG_LOG=$LOG_DIR/deploy-service-broker.log

mkdir -p $RUN_DIR $LOG_DIR
chown -R vcap:vcap $RUN_DIR $LOG_DIR

echo on_demand_service_plans set to <% properties.appdynamics_broker.on_demand_service_plans %>

<% if properties.appdynamics_broker.on_demand_service_plans %>
  APPD_PLANS="{"
  <%  p("appdynamics_broker.on_demand_service_plans").each do |plan|
         plan_name=plan['plan_name']
         account_name=plan['account_name']
         account_access_key=plan['account_access_key']
         controller_host=plan['controller_host']
         controller_port=plan['controller_port']
         ssl_enabled=plan['ssl_enabled']
  %>
    if [ "$APPD_PLANS" != "{" ]; then
      export APPD_PLANS="${APPD_PLANS},"
    fi
    export PLAN_NAME=<%="#{plan_name}"%>
    export ACCOUNT_NAME=<%="#{account_name}"%>
    export ACCESS_KEY=<%="#{account_access_key}"%>
    export CONTROLLER_HOST=<%="#{controller_host}"%>
    export CONTROLLER_PORT=<%="#{controller_port}"%>
    export SSL_ENABLED=<%="#{ssl_enabled}"%>
    export APPD_PLANS="${APPD_PLANS}\"${PLAN_NAME}\":{\"account-access-key\":\"${ACCESS_KEY}\",\"account-name\":\"${ACCOUNT_NAME}\",\"host-name\":\"${CONTROLLER_HOST}\",\"port\":\"${CONTROLLER_PORT}\",\"ssl-enabled\":\"${SSL_ENABLED}\"}"
  <% end %>
  export APPD_PLANS="${APPD_PLANS}}"
<% end %>
echo APPD_PLANS now set to $APPD_PLANS ....


function log_debug() {
  echo `date` $1 >> $DEBUG_LOG
}

function authenticate_and_target() {
  cf api $API_ENDPOINT <% if properties.ssl.skip_cert_verify %>--skip-ssl-validation<% end %>
  cf auth $ADMIN_USER $ADMIN_PASSWORD
  cf create-org $ORG
  cf target -o $ORG
  cf create-space $SPACE
  cf target -s $SPACE
}

function create_quota() {
  cf create-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10
  cf update-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10 --disallow-paid-service-plans
  cf set-quota $ORG $QUOTA
}

function create_open_security_group() {
  if [ "${CREATE_OPEN_SECURITY_GROUP}" == "true" ]; then
    echo "Creating open security group"

    cf create-security-group all_open $PACKAGE_PATH/templates/all_open.json
    cf bind-security-group all_open $ORG $SPACE
  else
    echo "Not creating open security group"
  fi
}

function provision_and_bind_db() {
  db_plan=`cf marketplace | grep p-mysql | awk '{ print $2 }' | sed 's/,//g'`
  if [ "$db_plan" != "" ]; then
    cf create-service p-mysql $db_plan $DEFAULT_DB_NAME
    #cf bind-service ${APP_NAME}-${APP_VERSION} $DEFAULT_DB_NAME
    cf bind-service ${APP_NAME} $DEFAULT_DB_NAME
  fi
}

function restart_app() {
  #CF_TRACE=true cf restart ${APP_NAME}-${APP_VERSION}
  #cf logs ${APP_NAME}-${APP_VERSION} --recent
  CF_TRACE=true cf restart ${APP_NAME}
  cf logs ${APP_NAME} --recent
}

# fix the timing issue arises from the (non-existent) gap between the deploy and register phases
function wait_till_running() {
  for i in `seq 1  6`
  do
    #CF_TRACE=true cf app ${APP_NAME}-${APP_VERSION} | grep RUNNING | grep ${APP_NAME}-${APP_VERSION}
    CF_TRACE=true cf app ${APP_NAME} | grep RUNNING | grep ${APP_NAME}
    if [ "$?" -ne "0" ]; then
      log_debug "App not running yet..."
      sleep 10
    else
      log_debug "App now up and running ..."
      break
    fi
  done
}

function add_env_vars() {
#  cf set-env ${APP_NAME}-${APP_VERSION} BASIC_AUTH_PASSWORD <%= properties.appdynamics_broker.broker.password %>
#  cf set-env ${APP_NAME}-${APP_VERSION} BASIC_AUTH_USERNAME <%= properties.appdynamics_broker.broker.user %>
#  cf set-env ${APP_NAME}-${APP_VERSION} ENCRYPTION_KEY <%= properties.appdynamics_broker.encryption_key %>
#  cf set-env ${APP_NAME}-${APP_VERSION} UAA_CLIENT_ID appdynamics-sb-service
#  cf set-env ${APP_NAME}-${APP_VERSION} UAA_CLIENT_SECRET <%= properties.uaa.clients.appdynamics_broker.secret %>
#  cf set-env ${APP_NAME}-${APP_VERSION} UAA_HOST $SCHEME://uaa.$DOMAIN
#  cf set-env ${APP_NAME}-${APP_VERSION} CC_HOST $API_ENDPOINT
#  cf set-env ${APP_NAME}-${APP_VERSION} LOGIN_HOST $SCHEME://login.$DOMAIN
#  cf set-env ${APP_NAME}-${APP_VERSION} ROOT "\$HOME"
#  cf set-env ${APP_NAME}-${APP_VERSION} SCHEME $SCHEME
#  cf set-env ${APP_NAME}-${APP_VERSION} VERIFY_SSL <%= !properties.ssl.skip_cert_verify %>
  cf set-env ${APP_NAME} UAA_HOST $SCHEME://uaa.$DOMAIN
  cf set-env ${APP_NAME} CC_HOST $API_ENDPOINT
  cf set-env ${APP_NAME} LOGIN_HOST $SCHEME://login.$DOMAIN
  cf set-env ${APP_NAME} ROOT "\$HOME"
  cf set-env ${APP_NAME} SCHEME $SCHEME
  cf set-env ${APP_NAME} VERIFY_SSL <%= !properties.ssl.skip_cert_verify %>


  # Adding additional properties that most spring based apps or internal apps seem to be expecting
#  cf set-env ${APP_NAME}-${APP_VERSION} CF_ORG $CF_ORG
#  cf set-env ${APP_NAME}-${APP_VERSION} CF_SPACE $CF_SPACE
#  cf set-env ${APP_NAME}-${APP_VERSION} CF_USER $CF_USER
#  cf set-env ${APP_NAME}-${APP_VERSION} CF_PASSWORD $CF_PASSWORD
#  cf set-env ${APP_NAME}-${APP_VERSION} CF_TARGET $CF_TARGET
#  cf set-env ${APP_NAME}-${APP_VERSION} SECURITY_USER_NAME $SECURITY_USER_NAME
#  cf set-env ${APP_NAME}-${APP_VERSION} SECURITY_USER_PASSWORD $SECURITY_USER_PASSWORD
  cf set-env ${APP_NAME} CF_ORG $CF_ORG
  cf set-env ${APP_NAME} CF_SPACE $CF_SPACE
  cf set-env ${APP_NAME} CF_USER $CF_USER
  cf set-env ${APP_NAME} CF_PASSWORD $CF_PASSWORD
  cf set-env ${APP_NAME} CF_TARGET $CF_TARGET
  cf set-env ${APP_NAME} SECURITY_USER_NAME $SECURITY_USER_NAME
  cf set-env ${APP_NAME} SECURITY_USER_PASSWORD $SECURITY_USER_PASSWORD

  # CUSTOM_VARIABLE_ENV_BEGIN_MARKER
  #cf set-env ${APP_NAME}-${APP_VERSION} APPD_PLANS $APPD_PLANS
  cf set-env ${APP_NAME} APPD_PLANS $APPD_PLANS
  # CUSTOM_VARIABLE_ENV_END_MARKER
}

# Use this only to bind any additional files/libraries or modify app contents
function modify_app() {
  pushd $PACKAGE_PATH
  cp ${PACKAGE_PATH}/lib/${APP_PREFIX_NAME}*.${EXTENSION_TYPE}  ${PACKAGE_PATH}/${TARGET_APP}
  popd
}

function delete_prev_app_instance() {

  #cf apps | grep ${APP_NAME}-${APP_VERSION}
  cf apps | grep ${APP_NAME}
  existing_app_check=$?

  if [ "$existing_app_check" == "0" ]; then

    # Look for User-Provided env variables and stop after the first blank line after that
    #cf env ${APP_NAME}-${APP_VERSION} | awk 'f{print}/User-Provided/{f=1};/^ *$/{f=0}' \
    cf env ${APP_NAME} | awk 'f{print}/User-Provided/{f=1};/^ *$/{f=0}' \
                | grep '.' | awk -F ':' '{print $1}' | while read env_variable_name
    do
      cf unset-env $env_variable_name
    done
    #cf delete -f ${APP_NAME}-${APP_VERSION}  > /dev/null
    cf delete -f ${APP_NAME}  > /dev/null
  fi
}

function push_app() {
  pushd $PACKAGE_PATH
    mkdir -p /var/vcap/data/tmp
    export TMPDIR=/var/vcap/data/tmp

    # Cleanup any older version of the app
    <% if properties.delete_prev_app_instance%>
    delete_prev_app_instance
    <% end %>

    #CF_TRACE=true cf push ${APP_NAME}-${APP_VERSION} -p
    CF_TRACE=true cf push ${APP_NAME} -p ${PACKAGE_PATH}/${TARGET_APP} -n ${APP_URI} -d ${APP_DOMAIN} -t ${APP_PUSH_TIMEOUT} -m ${APP_PUSH_MEMORY}m --no-start
    #cf logs ${APP_NAME}-${APP_VERSION} --recent
    cf logs ${APP_NAME} --recent
  popd
}


cf -v
authenticate_and_target
create_open_security_group
create_quota

modify_app
push_app
add_env_vars

restart_app
wait_till_running
