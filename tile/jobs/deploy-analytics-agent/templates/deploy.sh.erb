#!/bin/bash
set -e -x

  <%
    def grab_app_domain_name
      app_domains_str = properties.app_domains.to_s
      array_start = ( app_domains_str =~ /^\[/ )
      if (array_start == 0)
        app_domain_entry = app_domains_str.gsub(/^\[/, '').gsub(/\]/,'').gsub(/,.*/, '')
      else
        app_domain_entry = app_domains_str
      end
      app_domain_entry
    end
    app_domain = grab_app_domain_name
  %>

export PATH="/var/vcap/packages/cf_cli/bin:$PATH"
export ANALYTICS_ENABLED=<%= properties.appdynamics_analytics_agent.analytics.analytics_enabled %>
if [ "$ANALYTICS_ENABLED" != "true" ]; then
  exit
fi

export SCHEME=https
export ADMIN_USER=<%= properties.cf.admin_user %>
export ADMIN_PASSWORD=<%= properties.cf.admin_password %>
export DOMAIN=<%= properties.domain %>
export APP_DOMAIN=<%="#{app_domain}"%>
export API_ENDPOINT=$SCHEME://api.${DOMAIN}
export APP_NAME=AppDynamicsAnalytics
export APP_URI=<%= properties.appdynamics_analytics_agent.analytics.app_uri %>
export ORG=AppDynamicsPCFOpsMetrics-service-org
export SPACE=AppDynamicsPCFOpsMetrics-service-space
export QUOTA=AppDynamicsPCFOpsMetrics-service-quota
export CF_TARGET=$API_ENDPOINT
export CF_ORG=$ORG
export CF_SPACE=$SPACE
export CF_USER=$ADMIN_USER
export CF_PASSWORD=$ADMIN_PASSWORD
export CF_SKIP_SSL=<%= properties.ssl.skip_cert_verify %>
# export ORG_QUOTA=<%= properties.appdynamics_analytics_agent.app_push.org_quota %>
export ORG_QUOTA=4096
export APP_PUSH_TIMEOUT=<%= properties.appdynamics_analytics_agent.app_push.timeout %>
# export APP_PUSH_MEMORY=<%= properties.appdynamics_analytics_agent.app_push.memory %>
export APP_PUSH_MEMORY=1024

# Use this only if app needs additional libraries that need to be downloaded
#


# Use these variables only if app needs to know how to connect to a remote target that it brokers


export CREATE_OPEN_SECURITY_GROUP=<%= properties.appdynamics_analytics_agent.create_open_security_group %>
export DELETE_PREV_APP_INSTANCE=<%= properties.appdynamics_analytics_agent.delete_prev_app_instance %>

export SB_APP_ENV="setupServiceBrokerEnv.sh"

### CUSTOM_VARIABLE_BEGIN_MARKER

# Proxy Settings

export APPDYNAMICS_ANALYTICS_HOST_NAME=<%= properties.appdynamics_analytics_agent.analytics.http_event_endpoint_host %>
export APPDYNAMICS_ANALYTICS_PORT=<%= properties.appdynamics_analytics_agent.analytics.http_event_endpoint_port %>
export APPDYNAMICS_AGENT_ACCOUNT_NAME=<%= properties.appdynamics_analytics_agent.analytics.account_name %>
export APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY=<%= properties.appdynamics_analytics_agent.analytics.account_access_key %>
export APPDYNAMICS_ANALYTICS_SSL_ENABLED=<%= properties.appdynamics_analytics_agent.analytics.ssl_enabled %>
export PCF_DOMAIN_ID=`echo $DOMAIN | sed -e 's/\./_/g' `
## #CUSTOM_VARIABLE_END_MARKER

export CF_HOME=`pwd`/home/cf
mkdir -p $CF_HOME

# Following variables would be replaced based on blobs that get added and are considered as app bits
# Modify extension type for App file - modify as needed
APP_PREFIX_NAME=analytics-agent
EXTENSION_TYPE=zip

TARGET_APP=${APP_PREFIX_NAME}.${EXTENSION_TYPE}
JOB_NAME=deploy-analytics-agent
PACKAGE_NAME_SUFFIX=analytics_agent
PACKAGE_PATH=`echo /var/vcap/packages/*_${PACKAGE_NAME_SUFFIX}`

RUN_DIR=/var/vcap/sys/run/$JOB_NAME
LOG_DIR=/var/vcap/sys/log/$JOB_NAME
PIDFILE=${RUN_DIR}/pid

export DEBUG_LOG=$LOG_DIR/deploy-analytics-agent.log

mkdir -p $RUN_DIR $LOG_DIR
chown -R vcap:vcap $RUN_DIR $LOG_DIR

function log_debug() {
  echo `date` $1 >> $DEBUG_LOG
}

function authenticate_and_target() {
  cf api $API_ENDPOINT <% if properties.ssl.skip_cert_verify %>--skip-ssl-validation<% end %>
  cf auth $ADMIN_USER $ADMIN_PASSWORD
  cf create-org $ORG
  cf target -o $ORG
  cf create-space $SPACE
  cf target -s $SPACE
}

function create_quota() {
  cf create-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10
  cf update-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10 --disallow-paid-service-plans
  cf set-quota $ORG $QUOTA
}

function create_open_security_group() {
  if [ "${CREATE_OPEN_SECURITY_GROUP}" == "true" ]; then
    echo "Creating open security group"

    cf create-security-group all_open $PACKAGE_PATH/templates/all_open.json
    cf bind-running-security-group all_open
  else
    echo "Not creating open security group"
  fi
}

function restart_app() {
  CF_TRACE=true cf restart ${APP_NAME}
  cf logs ${APP_NAME} --recent
}

function add_env_vars() {

  # CUSTOM_VARIABLE_ENV_BEGIN_MARKER
  cf set-env ${APP_NAME} APPDYNAMICS_ANALYTICS_HOST_NAME     $APPDYNAMICS_ANALYTICS_HOST_NAME
  cf set-env ${APP_NAME} APPDYNAMICS_ANALYTICS_PORT          $APPDYNAMICS_ANALYTICS_PORT
  cf set-env ${APP_NAME} APPDYNAMICS_AGENT_ACCOUNT_NAME       $APPDYNAMICS_AGENT_ACCOUNT_NAME
  cf set-env ${APP_NAME} APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY $APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY
  cf set-env ${APP_NAME} APPDYNAMICS_AGENT_APPLICATION_NAME   $APPDYNAMICS_AGENT_APPLICATION_NAME
  cf set-env ${APP_NAME} APPDYNAMICS_ANALYTICS_SSL_ENABLED   $APPDYNAMICS_ANALYTICS_SSL_ENABLED
  cf set-env ${APP_NAME} JAVA_HOME "/home/vcap/app/.java-buildpack/open_jdk_jre"

  export JAVA_OPTS=" -Dhttp.event.accountName=${APPDYNAMICS_AGENT_ACCOUNT_NAME} -Dhttp.event.accessKey=${APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY} "
  if [ "${APPDYNAMICS_ANALYTICS_SSL_ENABLED}" == "true" ]; then
    export JAVA_OPTS=" -Dhttp.event.endpoint=https://${APPDYNAMICS_ANALYTICS_HOST_NAME}:${APPDYNAMICS_ANALYTICS_PORT} $JAVA_OPTS "
  else
    export JAVA_OPTS=" -Dhttp.event.endpoint=http://${APPDYNAMICS_ANALYTICS_HOST_NAME}:${APPDYNAMICS_ANALYTICS_PORT} $JAVA_OPTS "
  fi

# Proxy Settings
  export ANALYTICS_PROXY_ENABLED=<%= properties.appdynamics_analytics_agent.web_proxy.proxy_enabled %>
  if [ "${ANALYTICS_PROXY_ENABLED}" == "true" ]; then
    export ANALYTICS_PROXY_HOST=<%= properties.appdynamics_analytics_agent.web_proxy.http_proxy_host %>
    export ANALYTICS_PROXY_PORT=<%= properties.appdynamics_analytics_agent.web_proxy.http_proxy_port %>
    export ANALYTICS_PROXY_AUTH_ENABLED=<%= properties.appdynamics_analytics_agent.web_proxy.proxy_auth_enabled %>
    export ANALYTICS_PROXY_USER=<%= properties.appdynamics_analytics_agent.web_proxy.http_proxy_user %>
    export ANALYTICS_PROXY_PASSWORD=<%= properties.appdynamics_analytics_agent.web_proxy.http_proxy_password %>

    echo "Adding proxy host and port to Machine agent config"
    cf set-env ${APP_NAME} ANALYTICS_PROXY_HOST             $ANALYTICS_PROXY_HOST
    cf set-env ${APP_NAME} ANALYTICS_PROXY_PORT             $ANALYTICS_PROXY_PORT
    export JAVA_OPTS="${JAVA_OPTS} -Dhttp.event.proxyHost=${ANALYTICS_PROXY_HOST} -Dhttp.event.proxyPort=${ANALYTICS_PROXY_PORT} -Dhttp.proxyHost=${ANALYTICS_PROXY_HOST} -Dhttp.proxyPort=${ANALYTICS_PROXY_PORT} -Dhttps.proxyHost=${ANALYTICS_PROXY_HOST} -Dhttps.proxyPort=${ANALYTICS_PROXY_PORT} "
  fi

  if [ "${ANALYTICS_PROXY_AUTH_ENABLED}" == "true" ]; then
    echo "Adding proxy user and password to Analytics agent config"
    export JAVA_OPTS="${JAVA_OPTS} -Dhttp.event.proxyUsername=${ANALYTICS_PROXY_USER} -Dhttp.event.proxyPassword=${ANALYTICS_PROXY_PASSWORD} "
  fi

  #cf set-health-check ${APP_NAME} none


  # CUSTOM_VARIABLE_ENV_END_MARKER

  # Add app specific env variables using the setup script definition
  #add_parameterized_env_vars
}

# Use this only to bind any additional files/libraries or modify app contents
function modify_app() {
  pushd $PACKAGE_PATH
  cp ${PACKAGE_PATH}/lib/${APP_PREFIX_NAME}*.${EXTENSION_TYPE}  ${PACKAGE_PATH}/${TARGET_APP}
  popd
}

function delete_prev_app_instance() {

  cf apps | grep ${APP_NAME}
  existing_app_check=$?

  if [ "$existing_app_check" == "0" ]; then

    # Look for User-Provided env variables and stop after the first blank line after that
    cf env ${APP_NAME} | awk 'f{print}/User-Provided/{f=1};/^ *$/{f=0}' \
                | grep '.' | awk -F ':' '{print $1}' | while read env_variable_name
    do
      cf unset-env $env_variable_name
    done
    cf delete -f ${APP_NAME}  > /dev/null
  fi
}

function push_app() {
  pushd $PACKAGE_PATH
    mkdir -p /var/vcap/data/tmp
    export TMPDIR=/var/vcap/data/tmp

    # Cleanup any older version of the app
    <% if properties.delete_prev_app_instance%>
    delete_prev_app_instance
    <% end %>

    chmod 777 ${PACKAGE_PATH}/${TARGET_APP}
    CF_TRACE=true cf push ${APP_NAME} -n ${APP_URI} -p ${PACKAGE_PATH}/${TARGET_APP} -t ${APP_PUSH_TIMEOUT} -m ${APP_PUSH_MEMORY}m --no-start -c "/home/vcap/app/analytics-agent/bin/analytics-agent start"
    cf logs ${APP_NAME} --recent
  popd
}


cf -v
authenticate_and_target
create_open_security_group
create_quota

modify_app
push_app
add_env_vars

restart_app
